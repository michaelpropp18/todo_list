{"version":3,"sources":["ListItems.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","listItems","items","map","item","className","key","type","id","value","text","onChange","e","editItem","target","icon","onClick","deleteItem","duration","easing","library","add","faTrash","App","state","currentItem","currentKey","handleInput","a","async","setState","addItem","preventDefault","newItem","newItems","filteredItems","filter","onSubmit","this","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wVAiCeA,MA5Bf,SAAoBC,GAChB,IACMC,EADQD,EAAME,MACIC,KAAI,SAAAC,GAEpB,OAAO,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KACnC,2BACI,2BACIC,KAAK,OACLC,GAAIJ,EAAKE,IACTG,MAAOL,EAAKM,KACZC,SAAU,SAACC,GAAD,OAAOZ,EAAMa,SAASD,EAAEE,OAAOL,MAAOL,EAAKE,QACzD,8BACI,kBAAC,IAAD,CACAD,UAAU,UACVU,KAAK,QACLC,QAAS,kBAAMhB,EAAMiB,WAAWb,EAAKE,cAMzD,OACI,6BAAK,kBAAC,IAAD,CAAUY,SAAU,IAAKC,OAAO,eAChClB,K,eCvBbmB,IAAQC,IAAIC,K,IA0EGC,E,2MAvEbC,MAAO,CACLtB,MAAO,GACPuB,YAAa,CACXf,KAAM,GACNJ,IAAK,IAEPoB,WAAY,G,EAEdC,YAAc,SAAOf,GAAP,SAAAgB,EAAAC,OAAA,gDACZ,EAAKC,SAAS,CACZL,YAAa,CACXf,KAAME,EAAEE,OAAOL,MACfH,IAAK,EAAKkB,MAAME,cAJR,sC,EAQdK,QAAU,SAAOnB,GAAP,iBAAAgB,EAAAC,OAAA,gDACRjB,EAAEoB,iBAEmB,MADfC,EAAU,EAAKT,MAAMC,aACff,OACJwB,EADiB,sBACF,EAAKV,MAAMtB,OADT,CACgB+B,IACvC,EAAKH,UAAS,SAAAN,GAAK,MAAK,CACtBtB,MAAOgC,EACPT,YAAa,CACXf,KAAM,GACNJ,IAAK,IAEPoB,WAAYF,EAAME,WAAa,OAX3B,sC,EAeVT,WAAa,SAAOX,GAAP,eAAAsB,EAAAC,OAAA,gDACLM,EAAgB,EAAKX,MAAMtB,MAAMkC,QAAO,SAAAhC,GAAI,OAAIA,EAAKE,MAAQA,KACnE,EAAKwB,SAAS,CACZ5B,MAAOiC,IAHE,sC,EAMbtB,SAAW,SAAOJ,EAAOH,GAAd,eAAAsB,EAAAC,OAAA,iDACH3B,EAAQ,EAAKsB,MAAMtB,OACnBC,KAAI,SAAAC,GAIR,OAHIA,EAAKE,MAAQA,IACfF,EAAKM,KAAOD,GAEP,KAET,EAAKqB,SAAS,CACZ5B,MAAOA,IATA,sC,wEAaT,OACE,yBAAKG,UAAU,OACb,gCACE,0BAAMG,GAAG,aAAa6B,SAAUC,KAAKP,SACnC,2BACExB,KAAK,OACLgC,YAAY,aACZ9B,MAAO6B,KAAKd,MAAMC,YAAYf,KAC9BC,SAAU2B,KAAKX,cACjB,4BAAQpB,KAAK,UAAb,SAGJ,kBAAC,EAAD,CACEL,MAAOoC,KAAKd,MAAMtB,MAClBe,WAAYqB,KAAKrB,WACjBJ,SAAUyB,KAAKzB,gB,GAlEP2B,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e7b9f709.chunk.js","sourcesContent":["import React from 'react';\nimport './ListItems.css';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\nimport FlipMove from 'react-flip-move'\n\nfunction ListItems (props) {\n    const items = props.items;\n    const listItems = items.map(item => \n        {\n            return <div className='list' key={item.key}>\n                <p>\n                    <input \n                        type='text' \n                        id={item.key} \n                        value={item.text}\n                        onChange={(e) => props.editItem(e.target.value, item.key)} />\n                    <span>\n                        <FontAwesomeIcon\n                        className='faicons'\n                        icon='trash'\n                        onClick={() => props.deleteItem(item.key)}/>\n                    </span>\n                </p>\n            </div>\n        }\n    )\n    return (\n        <div><FlipMove duration={200} easing='ease-in-out'>\n            {listItems}\n        </FlipMove></div>\n    );\n}\n\nexport default ListItems;","import React from 'react';\nimport './App.css';\nimport ListItems from './ListItems';\nimport {library} from '@fortawesome/fontawesome-svg-core'\nimport {faTrash} from '@fortawesome/free-solid-svg-icons'\nlibrary.add(faTrash);\n\nclass App extends React.Component{\n  state ={\n    items: [],\n    currentItem: {\n      text: '',\n      key: ''\n    },\n    currentKey: 0\n  }\n  handleInput = async (e) => {\n    this.setState({\n      currentItem: {\n        text: e.target.value,\n        key: this.state.currentKey\n      }, \n    })\n  }\n  addItem = async (e) => {\n    e.preventDefault()\n    const newItem = this.state.currentItem;\n    if (newItem.text !== '') {\n      const newItems = [...this.state.items, newItem]\n      this.setState(state => ({\n        items: newItems,\n        currentItem: {\n          text: '',\n          key: ''\n        },\n        currentKey: state.currentKey + 1\n      }))\n    }\n  }\n  deleteItem = async (key) => {\n    const filteredItems = this.state.items.filter(item => item.key !== key);\n    this.setState({\n      items: filteredItems\n    })\n  }\n  editItem = async (value, key) => {\n    const items = this.state.items;\n    items.map(item => {\n      if (item.key === key) {\n        item.text = value\n      }\n      return 0;\n    });\n    this.setState({\n      items: items\n    })\n  }\n  render() {\n    return (\n      <div className='App'>\n        <header>\n          <form id='to-do-form' onSubmit={this.addItem}>\n            <input \n              type='text' \n              placeholder='enter text' \n              value={this.state.currentItem.text}\n              onChange={this.handleInput}/>\n            <button type='submit'>Add</button>\n          </form>\n        </header>\n        <ListItems\n          items={this.state.items}\n          deleteItem={this.deleteItem}\n          editItem={this.editItem}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}